version: 2.1

orbs:
  slack: circleci/slack@4.2.1

            
jobs:
  create-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Check If Infrastructure Exists, Creates It If Doesn't
          command: |
            if [[ $(aws cloudformation --region ${AWS_DEFAULT_REGION} \
              describe-stacks --stack-name ${STACK_NAME} --output text) ]]
            then
              echo Stack Exists, nothing to do
            else
              aws cloudformation create-stack --stack-name ${STACK_NAME} \
                --region ${AWS_DEFAULT_REGION} --template-body file://infrastructure.yml \
                --capabilities CAPABILITY_NAMED_IAM --parameters \
                ParameterKey=pDBName,ParameterValue=${DB_NAME} \
                ParameterKey=pDBUser,ParameterValue=${DB_USER} \
                ParameterKey=pDBPass,ParameterValue=${DB_PASS}
              while true; do 
                if [[ $(aws cloudformation describe-stacks --region ${AWS_DEFAULT_REGION} \
                  --stack-name ${STACK_NAME} --query "Stacks[*].StackStatus" \
                  --output text) == CREATE_IN_PROGRESS ]]
                then
                  echo -e "EKS Cluster status : CREATE IN PROGRESS \n"
                  sleep 10
                elif [[ $(aws cloudformation describe-stacks --region ${AWS_DEFAULT_REGION} \
                  --stack-name ${STACK_NAME} --query "Stacks[*].StackStatus" \
                  --output text) == CREATE_COMPLETE ]]
                then
                  echo -e "EKS Cluster status : SUCCESSFULLY CREATED \n"
                  break
                fi
              done
            fi
      - run:
          name: Store RDS Instance
          command: |
            export RDS_ID=$(aws cloudformation --region ${AWS_DEFAULT_REGION} \
              describe-stacks --stack-name ${STACK_NAME} \
              --query "Stacks[0].Outputs[?OutputKey=='InstanceId'].OutputValue" \
              --output text)
            export RDS_DNS=$(aws rds describe-db-instances --db-instance-identifier ${RDS_ID} \
              --query "DBInstances[0].[Endpoint.Address]" --output text)
            export DATABASE_URL=postgres://${DB_USER}:${DB_PASS}@${RDS_DNS}:5432/${DB_NAME}
            curl -H "Content-Type: text/plain" \
              -H "token: d5337210-32aa-45f1-943a-afe0c170b51e" \
              --request PUT --data "${DATABASE_URL}" \
              https://api.memstash.io/values/DATABASE_URL

  linting:
    docker:
      - image: alpine:latest
    steps:
      - checkout
      - run:
          name: Install Dependencies
          command: |
              wget -O /bin/hadolint https://github.com/hadolint/hadolint/releases/download/v2.4.1/hadolint-Linux-x86_64
              chmod +x /bin/hadolint
      - run:
          name: Lint Dockerfile
          command: |
              hadolint Dockerfile

    
  build-image:
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker Image
          command: |
              docker build . -t scavassa/cloud-devops-capstone:latest
      -run:
          name: Push Docker Image
          command: |
              docker login -u ${DOCKER_USER} -p ${DOCKER_PASS}
              docker push ${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}



            

workflows:
  default:
    jobs:
      - create-infrastructure
      - linting
      - build-image:
          requires: [linting]